//{ Driver Code Starts
//Initial Template for Java
import java.io.*;
import java.util.*; 


class GFG{
    public static void main(String args[]) throws IOException { 
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        
        while(t-- > 0){
            int n = sc.nextInt(); 
            int arr[] = new int[n];
            for (int i = 0; i < n; ++i)
            {
                arr[i] = sc.nextInt();
            }
            Solution obj = new Solution();
            int []ans= obj.sortArr(arr, n);
            for(int i=0;i<n;i++)
            {
                System.out.print(ans[i]+" ");
            }
            System.out.println();
        }
        
    }
}
// } Driver Code Ends


//User function Template for Java
class Solution 
{ 
    int[] sortArr(int[] arr, int n) 
    { 
        // code here
        if(n == 1){
            return arr ;
        }
        MergeSort(arr , 0 , n-1) ;
        return arr ;
    }
    int[] MergeSort(int[] arr , int left , int right){
        if(left<right){
            int mid = (left+right)/2 ;
            MergeSort(arr , left , mid) ;
            MergeSort(arr,mid+1 , right) ;
            Merge(arr , left ,mid,right) ;
        }
        return arr ;
    }
    void Merge(int[] arr , int left , int mid , int right){
        int n1 = mid - left + 1;
        int n2 = right - mid ;
        int[] arr1 = new int[n1] ;
        int[] arr2 = new int[n2] ;
        for(int i = 0 ; i<n1 ; i++){
            arr1[i] = arr[i+left] ;
        }
        for(int j = 0 ; j<n2 ; j++){
            arr2[j] = arr[mid+j+1] ;
        }
        int i = 0 , j = 0 , k = left ;
        while(i<n1 && j<n2){
            if(arr1[i] <= arr2[j]){
                arr[k] = arr1[i] ;
                i++ ;
            }
            else{
                arr[k] = arr2[j] ;
                j++ ;
            }
            k++ ;
        }
        while(i<n1){
            arr[k] = arr1[i] ;
            i++ ;
            k++ ;
        }
        while(j<n2){
            arr[k] = arr2[j] ;
            j++ ;
            k++ ;
        }
    }
} 
