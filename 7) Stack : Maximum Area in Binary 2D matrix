//{ Driver Code Starts
import java.util.*;

class FindMinCost
{
	public static void main(String args[])
	{
		Scanner sc = new Scanner(System.in);
		int t = sc.nextInt();
		while(t > 0)
		{
			int n = sc.nextInt();
			int m = sc.nextInt();
			int arr[][] = new int[n][m];
			for(int i=0; i<n; i++)
			{
				for(int j=0; j<m; j++ )
				{
					arr[i][j] = sc.nextInt();
				}
			}
			System.out.println(new Solution().maxArea(arr, n, m));
		t--;
		}
	}
}
// } Driver Code Ends


/*Complete the function given below*/
class Pair{
    int key , value ;
    public Pair(int key , int value){
        this.key = key ;
        this.value = value ;
    }
}
class Solution {
    public static int[] NSL(int[] arr , int n){
        Stack<Pair> stack = new Stack<>() ;
        int[] result = new int[n] ;
        for(int i = 0 ; i<n ; i++){
            if(stack.isEmpty()){
                result[i] = -1 ;
            }
            else if(!stack.isEmpty() && stack.peek().value < arr[i]){
                result[i] = stack.peek().key ;
            }else if(!stack.isEmpty() && stack.peek().value >= arr[i]){
                while(!stack.isEmpty() && stack.peek().value >= arr[i]){
                    stack.pop() ;
                }
                if(stack.isEmpty()){
                    result[i] = -1 ;
                }else{
                    result[i] = stack.peek().key ;
                }
            }
            stack.push(new Pair(i , arr[i])) ;
        }
        return result ;
    }
    
    public static int[] NSR(int[] arr , int n){
        
         Stack<Pair> stack = new Stack<>() ;
        int[] result = new int[n] ;
        for(int i = n-1 ; i >= 0 ; i--){
            if(stack.isEmpty()){
                result[i] = n ;
            }
            else if(!stack.isEmpty() && stack.peek().value < arr[i]){
                result[i] = stack.peek().key ;
            }else if(!stack.isEmpty() && stack.peek().value >= arr[i]){
                while(!stack.isEmpty() && stack.peek().value >= arr[i]){
                    stack.pop() ;
                }
                if(stack.isEmpty()){
                    result[i] = n ;
                }else{
                    result[i] = stack.peek().key ;
                }
            }
            stack.push(new Pair(i , arr[i])) ;
        }
        return result ;
        
    }
    
    public static int MAH(int[] arr , int n){
        int[] left = NSL(arr , n) ;
        int[] right = NSR(arr , n) ;
        int[] width = new int[n] ;
        for(int i = 0 ; i<n ; i++){
            width[i] = right[i] - left[i] - 1 ;
        }
        int[] area = new int[n] ;
        for(int i = 0 ; i<n ; i++){
            area[i] = arr[i]*width[i] ;
        }
        int Area = 0 ;
        for(int i = 0 ; i<n ; i++){
            Area = Math.max(area[i],Area) ;
        }
        return Area ;
        
    }
    public int maxArea(int M[][], int n, int m) {
        // add code here.
        int[] arr = new int[m] ;
        for(int j = 0 ; j<m ;j++){
            arr[j] = M[0][j] ;
        }
        int maxArea = MAH(arr , m) ;
        for(int i = 1 ; i<n ; i++){
            for(int j = 0 ; j<m ; j++){
                if(M[i][j] == 0){
                    arr[j] = 0 ;
                }else{
                    arr[j] = arr[j] + M[i][j] ;
                }
            }
            maxArea = Math.max(maxArea , MAH(arr , m)) ;
        }
        return maxArea ;
    }
}
